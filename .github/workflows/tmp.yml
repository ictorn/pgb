name: TMP
on: workflow_dispatch

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ictorn/pgb

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
        - platform: linux/amd64
          image: ubuntu-24.04
          arch: x86_64
        - platform: linux/arm64
          image: ubuntu-24.04-arm
          arch: aarch64
    runs-on: ${{ matrix.image }}
    timeout-minutes: 30
    name: create images
    steps:
      - name: prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: login to DH
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DH_USER }}
          password: ${{ secrets.DH_TOKEN }}
      - name: build and push by digests
        uses: docker/build-push-action@v6
        id: build
        with:
          provenance: false
          context: .
          file: Dockerfile.test
          build-args: |
            ARCH=${{ matrix.arch }}
          platforms: ${{ matrix.platform }}
          tags: ${{ env.REGISTRY_IMAGE }}
          annotations: |
            "org.opencontainers.image.source=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}"
            "org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}"
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.source=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }},annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}
      - name: export digests
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  
  merge:
    runs-on: ubuntu-24.04
    needs:
    - build
    steps:
    - name: download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true
    - uses: docker/setup-buildx-action@v3
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ env.REGISTRY_IMAGE }}
    - name: login to DH
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DH_USER }}
        password: ${{ secrets.DH_TOKEN }}
    - name: create manifest and push
      working-directory: ${{ runner.temp }}/digests 
      run: |
        docker buildx imagetools create \
#          --annotation "manifest-descriptor:org.opencontainers.image.source=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}" \
#          --annotation "manifest-descriptor:org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}" \
          -t ${{ env.REGISTRY_IMAGE }}:test \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
    - name: inspect image
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:test
    - name: login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: publish image in GHCR
      run: |
        docker buildx imagetools create \
#          --annotation "manifest-descriptor:org.opencontainers.image.source=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}" \
#          --annotation "manifest-descriptor:org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}" \
          -t ghcr.io/${{ github.repository }}:test \
          ${{ env.REGISTRY_IMAGE }}:test
   
